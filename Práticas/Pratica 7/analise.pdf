- Arquivo com o objetivo de realizar uma comparação entre o método de ordenação Heapsort e Shellsort

- TÓPICOS:  1 - valor de 'h' escolhido para o método Shellsort é um valor que torne o Shellsort mais otimizado, e é comparado o método com o Heapsort para diferentes tamanhos de vetores.
            2 - valor de 'h' escolhido para o método Shellsort é um valor inadequado que torne o Shellsort um pouco mais variável e menos otimizado, e é comparado o método com o Heapsort para diferentes tamanhos de vetores.

1) - Primeiramente, vamos comparar os 2 métodos contando que o Shellsort possui um valor de 'h' que teoricamente é um dos melhores valores que o método pode ter para que ele fique otimizado.
Esse valor seria: h = 3 * h + 1;

Dessa forma, primeiro vamos comparar os 2 métodos com vetores aleatórios pequenos (vão possuir no máximo 10 elementos), possuindo valores de 0 a 100.
Essa comparação é feita através de 2 funções (difTempoUsuario e difTempoSistema) que medem o tempo de execução da função do Heapsort e da Shellsort.
----- Abaixo está realizada essa comparação:

Primeiro array aleatório
99 13 39 53 51 
-------------
Heapsort sendo realizado....
13 39 51 53 99 
Heapsort status: 
-Tempo de usuário: 0.0000020 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
13 39 51 53 99 
Shellsort status: 
-Tempo de usuário: 0.0000270 seg, tempo de sistema: 0.00000000 seg

---------------------------------------

 Segundo array aleatório
19 33 19 13 11 15 
-------------
Heapsort sendo realizado....
11 13 15 19 19 33 
Heapsort status: 
-Tempo de usuário: 0.0000030 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
11 13 15 19 19 33 
Shellsort status: 
-Tempo de usuário: 0.0000020 seg, tempo do sistema: 0.00000000 seg

---------------------------------------

 Terceiro array aleatório
19 33 19 13 11 15 
-------------
Heapsort sendo realizado....
11 13 15 19 19 33 
Heapsort status: 
-Tempo de usuário: 0.0000040 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
11 13 15 19 19 33 
Shellsort status: 
-Tempo de usuário: 0.0000080 seg, tempo do sistema: 0.00000000 seg

-> CONCLUSÃO: Com isso, concluimos que nesse caso, o Heapsort geralmente realiza uma ordenação mais rápida ou semelhante que o Shellsort para vetores de tamanhos pequenos e com o valor de 'h' mencionado escolhido.

Agora, utilizando o mesmo valor do 'h' do Shellsort, porém comparando os 2 métodos com tamanhos grandes de vetores, podendo o tamanho variar de 0 até 340 no máximo.

Primeiro array aleatório
92 64 63 94 27 84 14 3 7 8 48 47 55 24 31 44 2 60 59 79 80 13 59 98 23 40 5 88 96 30 44 88 95 59 35 22 95 1 25 54 9 26 1 16 50 32 12 52 44 71 31 24 36 43 23 59 35 80 48 31 63 44 71 58 55 6 32 51 59 9 57 20 35 59 36 37 43 48 41 88 72 25 12 60 68 87 20 55 20 20 38 83 64 9 93 71 68 25 74 27 86 32 48 74 43 36 11 86 85 53 26 9 78 91 69 98 30 41 53 50 13 91 33 29 0 78 1 20 3 75 48 42 7 48 16 2 84 27 89 21 80 67 82 10 58 52 8 41 45 61 91 59 4 77 88 57 55 41 77 11 17 77 53 76 25 21 79 62 48 20 83 81 39 66 91 50 70 0 91 67 13 34 26 18 63 67 75 19 8 4 82 77 82 87 6 59 8 85 21 8 57 57 89 96 23 33 46 45 33 89 12 98 24 91 16 87 58 43 58 18 48 40 96 30 79 2 89 87 39 63 96 48 20 37 96 95 70 95 92 55 84 4 54 8 47 22 96 5 66 54 76 14 47 72 96 26 26 37 66 17 0 14 65 72 51 13 67 74 8 59 81 93 16 35 1 63 10 49 21 76 56 49 42 3 73 38 81 99 27 47 68 28 61 
-------------
Heapsort sendo realizado....
0 0 0 1 1 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6 7 7 8 8 8 8 8 8 8 9 9 9 9 10 10 11 11 12 12 12 13 13 13 13 14 14 14 16 16 16 16 17 17 18 18 19 20 20 20 20 20 20 20 21 21 21 21 22 22 23 23 23 24 24 24 25 25 25 25 26 26 26 26 26 27 27 27 27 28 29 30 30 30 31 31 31 32 32 32 33 33 33 34 35 35 35 35 36 36 36 37 37 37 38 38 39 39 40 40 41 41 41 41 42 42 43 43 43 43 44 44 44 44 45 45 46 47 47 47 47 48 48 48 48 48 48 48 48 48 49 49 50 50 50 51 51 52 52 53 53 53 54 54 54 55 55 55 55 55 56 57 57 57 57 58 58 58 58 59 59 59 59 59 59 59 59 59 60 60 61 61 62 63 63 63 63 63 64 64 65 66 66 66 67 67 67 67 68 68 68 69 70 70 71 71 71 72 72 72 73 74 74 74 75 75 76 76 76 77 77 77 77 78 78 79 79 79 80 80 80 81 81 81 82 82 82 83 83 84 84 84 85 85 86 86 87 87 87 87 88 88 88 88 89 89 89 89 91 91 91 91 91 91 92 92 93 93 94 95 95 95 95 96 96 96 96 96 96 96 98 98 98 99 
Heapsort status: 
-Tempo de usuário: 0.0000190 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 0 1 1 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6 7 7 8 8 8 8 8 8 8 9 9 9 9 10 10 11 11 12 12 12 13 13 13 13 14 14 14 16 16 16 16 17 17 18 18 19 20 20 20 20 20 20 20 21 21 21 21 22 22 23 23 23 24 24 24 25 25 25 25 26 26 26 26 26 27 27 27 27 28 29 30 30 30 31 31 31 32 32 32 33 33 33 34 35 35 35 35 36 36 36 37 37 37 38 38 39 39 40 40 41 41 41 41 42 42 43 43 43 43 44 44 44 44 45 45 46 47 47 47 47 48 48 48 48 48 48 48 48 48 49 49 50 50 50 51 51 52 52 53 53 53 54 54 54 55 55 55 55 55 56 57 57 57 57 58 58 58 58 59 59 59 59 59 59 59 59 59 60 60 61 61 62 63 63 63 63 63 64 64 65 66 66 66 67 67 67 67 68 68 68 69 70 70 71 71 71 72 72 72 73 74 74 74 75 75 76 76 76 77 77 77 77 78 78 79 79 79 80 80 80 81 81 81 82 82 82 83 83 84 84 84 85 85 86 86 87 87 87 87 88 88 88 88 89 89 89 89 91 91 91 91 91 91 92 92 93 93 94 95 95 95 95 96 96 96 96 96 96 96 98 98 98 99 
Shellsort status: 
-Tempo de usuário: 0.0000350 seg, tempo de sistema: 0.00000000 seg

---------------------------------------

 Segundo array aleatório
32 24 23 34 27 4 34 3 27 28 8 27 15 24 11 4 2 20 19 19 20 33 19 18 23 0 25 28 36 10 24 28 35 39 15 22 35 1 25 14 29 26 1 36 10 12 32 12 24 11 31 4 36 3 23 19 35 0 8 31 3 24 11 38 15 26 12 11 19 29 17 0 15 19 36 17 23 28 21 8 32 5 12 20 8 27 0 35 20 0 18 23 24 29 13 31 8 25 34 27 6 12 28 14 23 16 31 6 5 13 6 29 18 11 9 18 30 1 13 10 33 31 33 9 20 38 1 20 23 35 8 22 7 28 36 22 4 27 29 1 0 27 22 10 38 32 28 21 25 1 31 19 24 17 28 37 15 21 17 31 17 17 13 16 5 1 39 2 28 20 3 21 39 26 31 30 10 20 11 27 13 34 6 38 3 27 35 19 8 4 2 17 22 7 26 19 8 25 21 28 37 17 9 36 3 33 26 5 13 29 32 18 24 31 16 27 18 3 38 18 8 0 36 30 39 22 9 7 39 23 36 28 0 37 16 35 30 35 32 35 24 24 14 8 7 22 36 25 26 34 36 34 27 32 16 26 6 17 26 37 0 14 25 32 11 33 27 34 28 19 21 13 36 35 21 3 10 9 21 36 36 9 22 23 33 38 1 39 7 27 28 8 1 5 32 5 38 20 
-------------
Heapsort sendo realizado....
0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 30 30 30 30 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 34 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36 36 36 36 37 37 37 37 38 38 38 38 38 38 38 39 39 39 39 39 39 
Heapsort status: 
-Tempo de usuário: 0.0000540 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 30 30 30 30 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 34 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36 36 36 36 37 37 37 37 38 38 38 38 38 38 38 39 39 39 39 39 39 
Shellsort status: 
-Tempo de usuário: 0.0000040 seg, tempo do sistema: 0.00000000 seg

---------------------------------------

 Terceiro array aleatório
32 24 23 34 27 4 34 3 27 28 8 27 15 24 11 4 2 20 19 19 20 33 19 18 23 0 25 28 36 10 24 28 35 39 15 22 35 1 25 14 29 26 1 36 10 12 32 12 24 11 31 4 36 3 23 19 35 0 8 31 3 24 11 38 15 26 12 11 19 29 17 0 15 19 36 17 23 28 21 8 32 5 12 20 8 27 0 35 20 0 18 23 24 29 13 31 8 25 34 27 6 12 28 14 23 16 31 6 5 13 6 29 18 11 9 18 30 1 13 10 33 31 33 9 20 38 1 20 23 35 8 22 7 28 36 22 4 27 29 1 0 27 22 10 38 32 28 21 25 1 31 19 24 17 28 37 15 21 17 31 17 17 13 16 5 1 39 2 28 20 3 21 39 26 31 30 10 20 11 27 13 34 6 38 3 27 35 19 8 4 2 17 22 7 26 19 8 25 21 28 37 17 9 36 3 33 26 5 13 29 32 18 24 31 16 27 18 3 38 18 8 0 36 30 39 22 9 7 39 23 36 28 0 37 16 35 30 35 32 35 24 24 14 8 7 22 36 25 26 34 36 34 27 32 16 26 6 17 26 37 0 14 25 32 11 33 27 34 28 19 21 13 36 35 21 3 10 9 21 36 36 9 22 23 33 38 1 39 7 27 28 8 1 5 32 5 38 20 31 27 31 12 0 19 0 13 15 10 23 
-------------
Heapsort sendo realizado....
0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 13 13 14 14 14 14 15 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 30 30 30 30 31 31 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 34 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36 36 36 36 37 37 37 37 38 38 38 38 38 38 38 39 39 39 39 39 39 
Heapsort status: 
-Tempo de usuário: 0.0000190 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5 6 6 6 6 6 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 13 13 13 13 13 13 13 13 14 14 14 14 15 15 15 15 15 15 16 16 16 16 16 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 23 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28 28 28 28 28 28 28 28 28 29 29 29 29 29 29 30 30 30 30 31 31 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 33 33 33 33 33 33 34 34 34 34 34 34 34 35 35 35 35 35 35 35 35 35 35 36 36 36 36 36 36 36 36 36 36 36 36 36 37 37 37 37 38 38 38 38 38 38 38 39 39 39 39 39 39 
Shellsort status: 
-Tempo de usuário: 0.0000040 seg, tempo do sistema: 0.00000000 seg

-> CONCLUSÃO: Com isso, concluimos que nesse caso, o Shellsort geralmente realiza ordenações mais rápida que o Heapsort para vetores de tamanhos grandes e com o valor de 'h' mencionado escolhido, apesar do Heapsort manter sua ordem de complexidade.


2) - Agora vamos realizar o mesmo teste, porém com um valor de 'h' que torne o Shellsort menos otimizado: 'h' possuirá o valor inicial de n(n-1)/2, sendo atualizado a cada loop por: h/2
Começando com vetores aleatórios pequenos (vão possuir no máximo 10 elementos), possuindo valores de 0 a 100.

Primeiro array aleatório
48 21 14 38 
-------------
Heapsort sendo realizado....
14 21 38 48 
Heapsort status: 
-Tempo de usuário: 0.0000020 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
14 21 38 48 
Shellsort status: 
-Tempo de usuário: 0.0000040 seg, tempo de sistema: 0.00000000 seg

---------------------------------------

 Segundo array aleatório
28 21 14 38 17 
-------------
Heapsort sendo realizado....
14 17 21 28 38 
Heapsort status: 
-Tempo de usuário: 0.0000030 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
14 17 21 28 38 
Shellsort status: 
-Tempo de usuário: 0.0000220 seg, tempo do sistema: 0.00000000 seg

---------------------------------------

 Terceiro array aleatório
28 21 14 38 17 
-------------
Heapsort sendo realizado....
14 17 21 28 38 
Heapsort status: 
-Tempo de usuário: 0.0000020 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
14 17 21 28 38 
Shellsort status: 
-Tempo de usuário: 0.0000030 seg, tempo do sistema: 0.00000000 seg

-> CONCLUSÃO: Dessa forma, concluímos que o Shellsort realmente de modo geral demorou mais para executar a ordenação do que o Heapsort e seu tempo de execução varia muito, como já era de se esperar, para esse valor 'h' atualizado do Shellsort.

Agora, utilizando o valor atualizado do 'h' do Shellsort, porém comparando os 2 métodos com tamanhos grandes de vetores, podendo o tamanho variar de 0 até 340 no máximo.

 Primeiro array aleatório
17 52 39 33 87 45 83 55 70 82 68 98 96 29 6 34 62 43 86 96 85 33 48 18 57 27 81 67 34 10 56 51 14 47 37 54 93 72 9 15 54 29 14 50 58 20 37 73 15 75 69 0 8 17 18 66 97 51 33 31 13 42 34 80 89 23 34 34 96 95 50 2 77 64 53 87 36 42 60 51 17 81 3 26 51 21 44 48 25 29 79 38 71 65 18 13 89 4 47 85 0 49 87 77 65 92 64 1 86 77 4 4 58 7 82 9 81 26 
-------------
Heapsort sendo realizado....
0 0 1 2 3 4 4 4 6 7 8 9 9 10 13 13 14 14 15 15 17 17 17 18 18 18 20 21 23 25 26 26 27 29 29 29 31 33 33 33 34 34 34 34 34 36 37 37 38 39 42 42 43 44 45 47 47 48 48 49 50 50 51 51 51 51 52 53 54 54 55 56 57 58 58 60 62 64 64 65 65 66 67 68 69 70 71 72 73 75 77 77 77 79 80 81 81 81 82 82 83 85 85 86 86 87 87 87 89 89 92 93 95 96 96 96 97 98 
Heapsort status: 
-Tempo de usuário: 0.0000070 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 1 2 3 4 4 4 6 7 8 9 9 10 13 13 14 14 15 15 17 17 17 18 18 18 20 21 23 25 26 26 27 29 29 29 31 33 33 33 34 34 34 34 34 36 37 37 38 39 42 42 43 44 45 47 47 48 48 49 50 50 51 51 51 51 52 53 54 54 55 56 57 58 58 60 62 64 64 65 65 66 67 68 69 70 71 72 73 75 77 77 77 79 80 81 81 81 82 82 83 85 85 86 86 87 87 87 89 89 92 93 95 96 96 96 97 98 
Shellsort status: 
-Tempo de usuário: 0.0000030 seg, tempo de sistema: 0.00000000 seg

---------------------------------------

 Segundo array aleatório
37 12 19 33 27 25 23 35 30 22 8 38 16 29 6 14 22 3 6 16 5 33 8 18 37 7 21 7 34 10 16 31 14 27 17 34 13 32 29 35 14 29 34 30 18 0 37 33 35 35 9 0 28 17 18 26 17 31 33 11 33 2 34 0 29 3 34 34 36 15 30 2 37 24 33 7 16 22 0 11 17 1 3 6 11 21 24 28 5 9 39 38 11 25 38 33 29 24 27 25 0 9 27 37 25 12 4 1 26 37 4 4 38 7 2 9 21 26 29 26 35 28 24 39 6 15 32 
-------------
Heapsort sendo realizado....
0 0 0 0 0 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6 6 6 7 7 7 7 8 8 9 9 9 9 10 11 11 11 11 12 12 13 14 14 14 15 15 16 16 16 16 17 17 17 17 18 18 18 19 21 21 21 22 22 22 23 24 24 24 24 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 29 29 29 29 29 29 30 30 30 31 31 32 32 33 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 36 37 37 37 37 37 37 38 38 38 38 39 39 
Heapsort status: 
-Tempo de usuário: 0.0000060 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 0 0 0 1 1 2 2 2 3 3 3 4 4 4 5 5 6 6 6 6 7 7 7 7 8 8 9 9 9 9 10 11 11 11 11 12 12 13 14 14 14 15 15 16 16 16 16 17 17 17 17 18 18 18 19 21 21 21 22 22 22 23 24 24 24 24 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 29 29 29 29 29 29 30 30 30 31 31 32 32 33 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 36 37 37 37 37 37 37 38 38 38 38 39 39 
Shellsort status: 
-Tempo de usuário: 0.0000190 seg, tempo do sistema: 0.00000000 seg

---------------------------------------

 Terceiro array aleatório
37 12 19 33 27 25 23 35 30 22 8 38 16 29 6 14 22 3 6 16 5 33 8 18 37 7 21 7 34 10 16 31 14 27 17 34 13 32 29 35 14 29 34 30 18 0 37 33 35 35 9 0 28 17 18 26 17 31 33 11 33 2 34 0 29 3 34 34 36 15 30 2 37 24 33 7 16 22 0 11 17 1 3 6 11 21 24 28 5 9 39 38 11 25 38 33 29 24 27 25 0 9 27 37 25 12 4 1 26 37 4 4 38 7 2 9 21 26 29 26 35 28 24 39 6 15 32 35 39 11 12 31 21 31 28 6 36 25 0 22 22 4 
-------------
Heapsort sendo realizado....
0 0 0 0 0 0 1 1 2 2 2 3 3 3 4 4 4 4 5 5 6 6 6 6 6 7 7 7 7 8 8 9 9 9 9 10 11 11 11 11 11 12 12 12 13 14 14 14 15 15 16 16 16 16 17 17 17 17 18 18 18 19 21 21 21 21 22 22 22 22 22 23 24 24 24 24 25 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 28 29 29 29 29 29 29 30 30 30 31 31 31 31 32 32 33 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 36 36 37 37 37 37 37 37 38 38 38 38 39 39 39 
Heapsort status: 
-Tempo de usuário: 0.0000070 seg, tempo do sistema: 0.00000000 seg

Shellsort sendo realizado....
0 0 0 0 0 0 1 1 2 2 2 3 3 3 4 4 4 4 5 5 6 6 6 6 6 7 7 7 7 8 8 9 9 9 9 10 11 11 11 11 11 12 12 12 13 14 14 14 15 15 16 16 16 16 17 17 17 17 18 18 18 19 21 21 21 21 22 22 22 22 22 23 24 24 24 24 25 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 28 29 29 29 29 29 29 30 30 30 31 31 31 31 32 32 33 33 33 33 33 33 33 34 34 34 34 34 34 35 35 35 35 35 35 36 36 37 37 37 37 37 37 38 38 38 38 39 39 39 
Shellsort status: 
-Tempo de usuário: 0.0000030 seg, tempo do sistema: 0.00000000 seg

-> CONCLUSÃO: Com isso, concluímos que para um valor de 'h' que diminua o desempenho do Algoritmo do Shellsort junto com um vetor grande, o valor do desempenho do Algoritmo se torna muito variável e instável,
podendo ser até mais rápido que o Heapsort em certos vetores e em outros ser bem pior, sendo que o Heapsort mantém um padrão de desempenho e otimização, já que sua ordem de complexidade é constante.